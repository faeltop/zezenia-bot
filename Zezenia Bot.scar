{
  Zezenia Bot 0.2.2
  http://forums.scar-divi.com/showthread.php?228-Zezenia-Bot
}

program ZezeniaBot;

type
  Void = function: Boolean;

var
  i, x, y, tx, ty, bp, bp2, item, item2: Integer;
  monsterBmps, corpseBmps: array[0..10] of Integer;
  monsterOffset, corpseOffset: TPoint;
  gameScreenDTM, minimizeCloseButtonsBmp, targetCircleBmp: Integer;
  currentPlace, lastPlaceChange: Integer;
  nextScheduledEat: Integer;

  lootBp, foodBp: Integer;
  SXS, SYS, SXE, SYE: Integer;
  CW, CH, CXE, CYE: Integer;
  firstItemX, firstBpY, closeBtnX: Integer;

const
  // What to attack. Choose between creep, swarm, bug, bandit, orknie and dwarf.
  target = 'dwarf';

  // Time to wait for the GUI to response. Must be higher than 1000 / minimum FPS.
  gui = 100;

  // Time to wait for the server to respond. The higher, the safer.
  ping = 3000;

  // How long to wait until giving up for a target.
  attackTimeout = 60000;

  // Not tested enough.
  smartTargeting = True;

  // How much bacpacks are opened after the food backpack (if there is) and are
  // used for carrying gold?
  carryBps = 1;

  // Use the first item in the food backpack every... If set to 0, eating is disabled.
  eatFrequency = 0;

  // VK_F1, VK_F2, etc.
  spellHotkey = VK_F1;

  // Press the spell hotkey every... If set to 0, spelling is disabled.
  spellFrequency = 0;

  // Enable or disable place changing.
  changePlaces = False;

  // Assuming you are in place 1, where to click (on the minimap) to get to place 2?
  toPlace2X = 1880;
  toPlace2Y = 62;

  // Assuming you are in place 2, where to click (on the minimap) to get to place 1?
  toPlace1X = 1808;
  toPlace1Y = 159;

  // Stay in every place at least...
  placeChangeFrequency = 10000;

  // How long it takes to get to switch place.
  placeChangeTime = 20000;

  goldPieceColor = 42748;
  eggColor = 13487565;

  SW = 480;
  SH = 352;

  TS = 32;

  STX = 7;
  STY = 5;

  itemStep = 40;
  bpStep = 88;
  closeBtnOffsetY = -37;

procedure LearnGui;
var x, y: Integer;
begin
  GetClientDimensions(CW, CH);
  CXE := CW - 1;
  CYE := CH - 1;

  FindDTM(gameScreenDTM, x, y, 0, 0, CXE, CYE);
  SXS := x + 1;
  SYS := y + 1;
  SXE := SXS + SW;
  SYE := SYS + SH;

  FindBitmap(minimizeCloseButtonsBmp, x, y);
  firstItemX := x - 104;
  firstBpY := y + 41;
  closeBtnX := x + 19;

  if eatFrequency <> 0 then
    foodBp := 1;
  lootBp := foodBp + carryBps + 1;
end;

procedure LoadCreep;
begin
  monsterOffset.X := 5;
  monsterOffset.Y := 15;
  corpseOffset := monsterOffset;

  // up
  monsterBmps[0] := BitmapFromString(7, 4, 'beNpzcygM9e1Mj51WkV8U6gt' +
    'E8W4ODAwMEBEgCURFYVBBIIksoq0gCxQEkh6mBhAEYccDAJmkGJM' +
    '=');

  // down
  monsterBmps[1] := BitmapFromString(4, 6, 'beNozNWBgYIhztS8M9XU3AbG' +
    'BDCCKc7MHsoEiHqYg1JkWAyTj3ByAJFAcSBaF+ca7OUyryIco8AA' +
    'AUQkRYw==');

  // right
  monsterBmps[2] := BitmapFromString(9, 3, 'beNpzd1zc0cAABjOqCj3NDIH' +
    'koo56ICPB3XEmWASCgFwICUTF4X5Adkm4P4TbkxEH5HZnxAFRAgA' +
    'FvRnd');

  // left
  monsterBmps[3] := BitmapFromString(8, 3, 'beNrLjC+N8O/NjE/0cNRRlAM' +
    'ySiL8gYyezHgge1Z1EZD0MjMEMoAIqAbC6AXLAsUhDKB4DwDhmhw' +
    'h');

  corpseBmps[0] := BitmapFromString(4, 3, 'beNpLjGBAApFONtmBnkAEZDQ' +
    'lRkARAG7QCKU=');
end;

procedure LoadSwarm;
begin
  monsterOffset.X := 10;
  monsterOffset.Y := 10;

  // up
  monsterBmps[0] := BitmapFromString(5, 5, 'beNqLiDA2NnZ3d6+urgaSDGB' +
    'gjAqA4kDSAwyAjKysLCCZnZ0N4QI1AsmampoIAKBXE3g=');

  // down
  monsterBmps[1] := BitmapFromString(5, 4, 'beNozMjI0NKyoqDAyMgKSYWF' +
    'hQEZGRgaEdHNzM0ICEC5QvLKyEqQSAA/TEWU=');

  // right
  monsterBmps[2] := BitmapFromString(5, 6, 'beNozNmYAA3d3dyAZERERHh5' +
    'ujASAgtXV1VlZWUB2dnY2kAuXAooDuVVVVRBZoF4gF6jdHQyMAU4' +
    'bFKE=');

  // left
  monsterBmps[3] := BitmapFromString(5, 6, 'beNpjYAgNDTU0NDSCAQYGhoq' +
    'KioyMDCAbSAK5cKnKykpk2bCwMCAXSLqBAUQ93BAGALYrFMg=');

  corpseBmps[0] := BitmapFromString(5, 5, 'beNozMGBgYEhJSSkpKWGAASD' +
    'X2dkZyICQBmAAZJSWlsIFgSA1NRXCBeoFqQAA2ooNAw==');
end;

procedure LoadBug;
begin
  // up
  monsterBmps[0] := BitmapFromString(7, 7, 'beNrzCL26g6enUNjblmtFPwe' +
    'Q7C0SXjGB49oOHiDbDAyEhIR8bLmu7+QBCgLZ5mAgBAZAQSACykI' +
    'ENTQ0gOwHp7x1dE1XTuAAsiHkjV08KydyVDRPAoozIAEg18LRR01' +
    'Nt6Jl0vytB4Lii9TUde0AlB0p5g==');

  // down
  monsterBmps[1] := BitmapFromString(6, 3, 'beNpT0w2IK+hZuDY2q0ZZUWb' +
    'u5n2qajpzN+81NtA2t/e0NDHon7kELLLPwsG7Z9G6eVv2xWXXqgI' +
    'AOeYV1g==');

  // right
  monsterBmps[3] := BitmapFromString(9, 3, 'beNpjYHDwiojNqWVgYJi4fDM' +
    'DKqhqm6qmrqerqQKSLRWBI4iUrp6ZsLDwnX08cASSAgDB2xUX');

  // left
  monsterBmps[2] := BitmapFromString(8, 4, 'beNpjYACCiaUicATkqqnrVbV' +
    'NhYjf2csDR7p6ZkDxNZM5gGyglK8dl7CwMJBcO5kDKAVUf2QlF5B' +
    'rAQNANgMAiXQcKA==');

  corpseBmps[0] := BitmapFromString(12, 5, 'beNoTEWKAAUFBQRMTE' +
    'xVVbUEkAJEy0tNqn7N8xtrtUekVPDw8QDXqqopFtd0Q5B2aYu3s3' +
    'z5nRVR6pZK8NFAZUAEQARmmtu5FdT36OhpABUBlQHOAIubGel1T5' +
    'kHUFNf1ALlAXV6hyUBk7RxgZufpF507c92OqIxKiBpb1yCgSGFtt' +
    '56WOlCNGADktjB+');
end;

procedure LoadBandit;
begin
  monsterOffset.X := 15;
  monsterOffset.Y := 15;

  // up
  monsterBmps[0] := BitmapFromString(9, 8, 'beNpjZV09ufzQ8nYgW' +
    'jO5fEZzVkGCn5+zORAxMDBAxA8v71gzpWJmS1ZnacKi7gJ/F5BUR' +
    '2k8UBAu3lmWUJjov6i70MZYE2jCwq6CmS3ZQDSrJRso1QWWBSKgR' +
    'iAXJN4KQot6CrvKEwuT/IGIj48PKGttrAkyp6dwMRhBZHl5eSGyN' +
    'mBZoPj6aVUQWaAgKysrUAEbGxuQAZMqYgUArKNTZQ==');

  // down
  monsterBmps[1] := BitmapFromString(8, 8, 'beNpzMFk/vWr/ktb' +
    '9S9s2zqie35lflRka4+cAJCGCB0DiNQs68yfWplZnhm2eWdtfkwJ' +
    'RCREEobrUFRPLKjNCl/WXLO8vBYqsmFC6sKtgUl1qjL8DAwMD0DQ' +
    'guaCrAKgSyJhUl2aur8YABlWZYRCVQMGarDALsDg3NzeQrM4KA4o' +
    'DSaBiLwcToAgHBwdECigCREDFXgDIUEeq');

  // right
  monsterBmps[3] := BitmapFromString(8, 8, 'beNpzMFk/vWr/kt' +
    'b+mpTKjFAGJAAU3L+0beOM6mX9JVWZIClubm4ODg6g4IGlbfM785' +
    'f3lwIFqzLDIFJAlRtn1CzozJ9Ym7qgq2BhV0F1FkgKqBIiuGJC6c' +
    'S61ElgZK6vBjQTKAhEQJVAZZPq0oDqgeIxfg7VmWEwlWk1YEEgAg' +
    'punlW7YmJZrL8DkGuhr+blYOIFANn/R60=');

  // left
  monsterBmps[2] := BitmapFromString(8, 7, 'beNrj41s9uXx6c+a' +
    'M5ixrY00GBgZeXl5WVlYgAygCQfkJfkApoCAXFxeQ7CiNB4m3ZC3' +
    'sKihI8AOK8PPzA6WA4kAEFIQjiBRQTUdpQmdZwqLugrVTK4AIKC4' +
    'gIADSnuhXkOgPkQIioDgfHx/QLoh4IVgKYi8fABKRNGc=');

  corpseBmps[0] := BitmapFromString(7, 4, 'beNpjZ+VkJ4BkxPghDCE+Tms' +
    '9eT8bTWRZDwu19iwvCMoJsQIJAgDLtgiG');
end;

procedure LoadOrknie;
begin
  monsterOffset.X := 10;
  monsterOffset.Y := 10;

  // up
  monsterBmps[0] := BitmapFromString(8, 8, 'beNrLdt/aV31g4cRt/' +
    'TUToh2BpKGhIQMYAAXvHFlzasPS7WApIAIy1lSnANWc3LAUJD6hB' +
    'ogOLpoEFFxTkwJUsLo6+RRYCshNdjGHoCurGq6sagQJVqdMjHFck' +
    'u0OlAUioDlABDQTYsjBRZOBgjsm1AINAaoHKgYLQsXX1qTAxcHqJ' +
    '19b3QhUvAQAgxln2g==');

  // down
  monsterBmps[1] := BitmapFromString(8, 7, 'beNpzs9w3tXFTQzo' +
    'QTYt3TnOznBrvvHdK494pDSdXzABKbW7IAAoaqspCEJC9f1oTUHB' +
    'avAuQvLR9zYkVM4B6gVKbGzOmgwWBGoFkupsl0EAwctk3rQnMdUl' +
    'HMurSjjVArrGxMVAcqExYxsjRxghoPtBSoCCQC7bFGagSJA4AX3R' +
    'Dww==');

  // right
  monsterBmps[3] := BitmapFromString(12, 8, 'beNpztUh2Md8xo' +
    'fb0xmWHFk/eMbF2bU3K0hz362uaJsU43j+2LsXFHCgyMcYRKHV48' +
    'ZSdE+vW1aZOinE6s2k5hA0hgQikF8adFOsEZKS4WBgZGQFJiAKgU' +
    'UA1EDZQAUjEFaRAWNoQyIUgiGKg+RDGkSVTJoPFoSa4WthbGRqoy' +
    'IJNswAyzm5esR4sDlQGREAROILYAmQcWTIVqADIAFoEkQIaAkRAQ' +
    'ZD7J9UBRYCGQLTbWxtCEFAWhACj5HUJ');

  // left
  monsterBmps[2] := BitmapFromString(9, 8, 'beNo1ijEOgkAUBTm' +
    'InQcwNNJKMPEQWAGlN9glES6wi56AGCxkSbQBS2K0wVal4i6OISa' +
    'Tl/fnfZNalhV481qJ2XSi/EUpwjbPQPsuJwmB55BMtZKv0xYobb4' +
    'j8e8yaZQ0IjQiAvxwr7pzQf9NWpIwPCreusvx+afRsZERfEySrV3' +
    'Oq47xlYwot8OepONZx07Bj2Bs2x5NuHSKzWr0vUn7LywldkY=');

  corpseBmps[0] := BitmapFromString(5, 7, 'beNpjYIiOjnZ' +
    '2djYEAwYGKBcI4OJARn5+PlxBQUGBi4sLkG2rIskAA0D2wjgnIFp' +
    'fHAVEyOxF8U75DroMADR7HEs=');

  corpseBmps[1] := BitmapFromString(6, 7, 'beNrbNJeBgSH' +
    'CxrAh0Kox0GrNxOb9M4tX9zfNzIs0N9a2MNaelRe5dmLzovo8IBe' +
    'oDMhe0ljQFARSrKUguaQhH8jWVpBc2lgAlAUyIAjIXTepBWSyrSG' +
    'QBKoBcg/OLgVqB8oCRZY2gRScBACAcy10');
end;

procedure LoadDwarf;
begin
  monsterOffset.X := 10;
  monsterOffset.Y := 10;
  corpseOffset.X := -5;
  corpseOffset.Y := -5;

  // up
  monsterBmps[0] := BitmapFromString(14, 5, 'beNrT0GBgYCgOtF3ZmAlExYF' +
    '2i0pjgIxVjZklQXbJriaBltpABpAEKlOVEp6Q5rOyIROopjXObWK' +
    'aL1AZhA1UCSRVpYWBiiEqgWYuLI0BqgEyICqBJBABFUAMBCpW0tC' +
    'AqAQaC5RqAZvZikSmuZsCFTvoKtq6OANVJrmatMQCxX2QVQIVQBh' +
    'QMwFgpEZC');

  // down
  monsterBmps[1] := BitmapFromString(10, 7, 'beNrTVWJgYAi01C4NsgOSk' +
    '9J9IQxVaWEGMIAIrm7KgpAQBlwNkAFEYEE/CAnkQsgMbwsIYzISm' +
    'eJmCtEC1A5kQ+xFE4GodNBVWpzjfHdN3cODmzbXhQLZ4VYqQAUgN' +
    'VYgqyFSLy/sBZL31tQBFQC1BFlpOwAARwJLvw==');

  // right
  monsterBmps[3] := BitmapFromString(12, 7, 'beNoLsmNgYAiy0i4Ntpuc' +
    '4ZfiZuqgq6QqLQwUAYrbubrs3LsPogAoC1QDRED24lzne2vqgMqA' +
    'UnDFpUF2a5qy1jRnQ1QCFTw6uLk13HxLXSjQ2L3zOoEqAy1B5oAU' +
    'BNkB0cODm15e2Lu5LhRIAtUD9QKNmpTutxpoTlMWRBlQFqgMqLcl' +
    '3BzIhjgSKA5UMzkdpABo5uIc57ura8OtVIAqgVygFFANkDEp3Reo' +
    'AMgGIqAsRNnmWrB75naWAgBuYmHp');

  // left
  monsterBmps[2] := BitmapFromString(13, 7, 'beNqz0GJgYLDTVvA31yoMs' +
    'OlL8QaSQJTgYuxvoaUiJRyVGMcABkA1QNlldekQNK84CshtinGFa' +
    'AGqByuOT3A2bopxgaicD1YDQRCVQDLRxRhiGsQiIAIKQkg4A0ICH' +
    'QA0FqIR2SiIORC9QNOS3UwgLoe7DYggpkHcBjHKTkcRaBqEi3BbK' +
    'ggVBdhCSJBKAKEMXog=');

  corpseBmps[0] := BitmapFromString(12, 6, 'beNpjYCAGCItLWTk6rN20' +
    'ua2rKzw+BigCIYGCQKSgpgZR1t7VtW7TZiACMiBcIBkRHwNkAJVB' +
    '1ABlgez27u4IsAlwEigOYQOlkK2OiI+F6AUy1m3eAiTxuBMoux6i' +
    'BgASASvD');

  corpseBmps[1] := BitmapFromString(9, 8, 'beNpLjKuPcl5ckzqnMKI7y' +
    'QtIAlFDlEu8s5GttgIQAWUboMgFggr8rYGywebKvuaaQC1ANUAuR' +
    'EtDtEtPstckXl6IIMQQiDiU7QQS9DPXnFMYiRB0NrJ2cgS6AWgIU' +
    'ApowtyiSCADKKiort7Z2wtkQwwBigNlgVqA4kAEVADUAhRZUpMGl' +
    'AUiBgYGoHqgeCQA23NEog==');
end;

procedure Load;
begin
  // Use bitmap index 0.
  BitmapFromString(0, 0, '');

  case target of
    'creep': LoadCreep;
    'swarm': LoadSwarm;
    'bug': LoadBug;
    'bandit': LoadBandit;
    'orknie': LoadOrknie;
    'dwarf': LoadDwarf;
  end;

  gameScreenDTM := DTMFromString('78DA639CC7C4C0A0CAC8800C444444C0344C9' +
    '4B19E85B01A90396D4C84CD415313141484A9E606237E35EECC04' +
    'CD0100ACA70973');

  minimizeCloseButtonsBmp := BitmapFromString(26, 12, 'beNqNkmsOw' +
    'iAQhC/BL2OVtgRXAqSNnsQT92gODCAxJrLZEB5fh9mlSr0Gwsl6t' +
    '/NrLJ67Z27e7FE2t2AMTmOMTiuloObEjJBgoujN2yAXjjl1yJs4A' +
    'nNbz/T2l0yMW7DEdSmjTafR8nZkVjsVtUwex9GTWDYSTL2Cd13gv' +
    '1tOYOw63e21J6FAkpNGZkbHvP8V/BYMjDmZG4n9xkOQO+FTqcH8l' +
    '1qyUV9hbiTNVGYKt6mR9L9H+9gE3fjUm9sYXPHmne3JVmDpYSXBY' +
    'I735YhkEyhYKjWlb2Sg0JMUbJUmRq448rL0786sla4jJP2nH4ZPm' +
    'ZpQimV7q7d5hBwJ/L1izv+5N8teyK4=');

  targetCircleBmp := BitmapFromString(3, 2, 'beNrj51nNxzVXg' +
    'GcZP/dCPq5lfNyLASb6BHM=');

  LearnGui;
end;

function WaitFunc(func: Void; positive: Boolean; timeout: Integer): Boolean;
var start: Integer;
begin
  start := GetSystemTime;
  Result := True;
  while func() <> positive do
  begin
    if GetSystemTime - start >= timeout then
    begin
      Result := False;
      break;
    end;
  end;
end;

function WaitTrue(func: Void; timeout: Integer): Boolean;
begin
  Result := WaitFunc(func, True, timeout);
end;

function WaitFalse(func: Void; timeout: Integer): Boolean;
begin
  Result := WaitFunc(func, False, timeout);
end;

function RandomAround(base: Integer; minDeviation, maxDeviation: Extended): Integer;
begin
  Result := RandomRange(Round(minDeviation * base), Round(maxDeviation * base));
end;

procedure SafeMove(x, y: Integer);
begin
  MoveWindMouseEx(x, y, 0, 0, 40);
end;

procedure SafeClick(x, y: Integer; left: Boolean);
begin
  SafeMove(x, y);
  ClickMouse(x, y, left);
end;

procedure Drag(fx, fy, tx, ty: Integer);
begin
  SafeMove(fx, fy);
  Wait(gui);
  HoldMouse(fx, fy, True);
  SafeMove(tx, ty);
  ReleaseMouse(tx, ty, True);
end;

procedure ToTileLoc(x, y: Integer; out tx, ty: Integer);
begin
  tx := Floor((x - SXS) / TS);
  ty := Floor((y - SYS) / TS);
end;

procedure ToScreenLoc(tx, ty: Integer; out x, y: Integer);
begin
  x := SXS + tx * TS;
  y := SYS + ty * TS;
end;

procedure ToScreenLocRnd(tx, ty: Integer; out x, y: Integer);
var p: TPoint;
begin
  ToScreenLoc(tx, ty, x, y);
  p := RndBoxPointG(Box(x, y, x + TS, y + TS), 1.5);
  x := p.X;
  y := p.Y;
end;

function BpY(bp: Integer): Integer;
begin
  Result := firstBpY + bpStep * (bp - 1);
end;

function ItemX(bp: Integer): Integer;
begin
  Result := firstItemX + itemStep * (bp - 1);
end;

function CloseBtnY(bp: Integer): Integer;
begin
  Result := BpY(bp) + closeBtnOffsetY;
end;

function IsOpen(bp: Integer): Boolean;
var x, y: Integer;
begin
  Result := FindColorCircleTolerance(x, y, 12632256, closeBtnX, CloseBtnY(bp), 10, 90);
end;

function IsCurrentBpOpen: Boolean;
begin
  Result := IsOpen(bp);
end;

procedure Close(bp: Integer);
var x, y: Integer;
begin
  x := closeBtnX;
  y := CloseBtnY(bp);
  while IsOpen(bp) do
  begin
    MoveMouseSmooth(x, y);
    ClickMouse(x, y, True);
    Wait(400);
  end;
end;

function FindItemAt(color, bp, item: Integer; out resultBp, resultItem: Integer): Boolean;
var
  bpUnspecified, itemUnspecified, found: Boolean;
  x, y: Integer;
begin
  if bp = 0 then
  begin
    bpUnspecified := True;
    bp := 1;
  end;
  if item = 0 then
  begin
    itemUnspecified := True;
    item := 1;
  end;
  while IsOpen(bp) do
  begin
    while item <= 3 do
    begin
      found := FindColorCircleTolerance(x, y, color, ItemX(item), BpY(bp), 20, 10);
      if found then
      begin
        resultBp := bp;
        resultItem := item;
        break;
      end;
      if itemUnspecified then
        item := item + 1
      else
        break
    end;
    if bpUnspecified then
      bp := bp + 1
    else
      break
  end;

  Result := found;
end;

function FindItem(color: Integer; out resultBp, resultItem: Integer): Boolean;
begin
  Result := FindItemAt(color, 0, 0, resultBp, resultItem);
end;

procedure MoveSlot(fromBp, fromItem, toBp, toItem: Integer);
begin
  Drag(ItemX(fromItem), BpY(fromBp), ItemX(toItem), BpY(toBp));
  Wait(gui);
  KeyDown(VK_RETURN);
  Wait(RandomRange(60, 130));
  KeyUp(VK_RETURN);
end;

// TODO
{procedure MoveSlotToTile(fromBp, fromItem, toBp, toItem: Integer);
begin
  MoveItem(fromBp, fromItem, ItemX(toItem), BpY(toBp));
end;}

procedure UseItem(bp, item: Integer);
begin
  SafeClick(ItemX(item), BpY(bp), False);
end;

function LocateTarget(out x, y: Integer): Boolean;
var start: Integer;
begin
  start := GetSystemTime;
  Result := True;
  while not FindBitmapToleranceIn(targetCircleBmp, x, y, SXS, SYS, SXE, SYE, 20) do
  begin
    if GetSystemTime - start >= 1500 then
    begin
      Result := False;
      break;
    end;
  end;
end;

function HasTarget: Boolean;
var x, y: Integer;
begin
  Result := LocateTarget(x, y);
end;

function IsTooFar(tx, ty: Integer): Boolean;
begin
  Result := (Abs(tx - STX) > 1) or (Abs(ty - STY) > 1);
end;

function IsOnSelf(tx, ty: Integer): Boolean;
begin
  Result := (tx = STX) and (ty = STY);
end;

procedure ClickTile(tx, ty: Integer; left: Boolean);
var x, y: Integer;
begin
  ToScreenLocRnd(tx, ty, x, y);
  SafeClick(x, y, left);
end;

procedure MoveTile(ftx, fty, ttx, tty: Integer);
var fx, fy, tx, ty: Integer;
begin
  ToScreenLocRnd(ftx, fty, fx, fy);
  ToScreenLocRnd(ttx, tty, tx, ty);
  Drag(fx, fy, tx, ty);
end;

procedure MoveTileToSlot(ftx, fty, tbp, titem: Integer);
var fx, fy, tx, ty: Integer;
begin
  ToScreenLocRnd(ftx, fty, fx, fy);
  tx := ItemX(titem);
  ty := BpY(tbp);
  Drag(fx, fy, tx, ty);
end;

function FindMonster(out tx, ty: Integer): Boolean;
var
  points: TPointArray;
  i, j, _tx, _ty: Integer;
begin
  for i := 0 to High(monsterBmps) do
  begin
    if monsterBmps[i] = 0 then
      break;
    if FindBitmapsTolerance(monsterBmps[i], points, SXS, SYS, SXE, SYE, 20) then
    begin
      for j := 0 to High(points) do
      begin
        ToTileLoc(points[j].X + monsterOffset.X, points[j].Y + monsterOffset.Y, _tx, _ty);
        if not IsTooFar(_tx, _ty) then
        begin
          tx := _tx;
          ty := _ty;
          Result := True;
          break;
        end;
      end;
    end;
    if Result then
      break;
  end;
end;

function FindCorpse(out tx, ty: Integer): Boolean;
var points: TPointArray;
var i, j, _tx, _ty: Integer;
begin
  for i := 0 to High(corpseBmps) do
  begin
    if corpseBmps[i] = 0 then
      break;
    if FindBitmapsTolerance(corpseBmps[i], points, SXS, SYS, SXE, SYE, 30) then
    begin
      for j := 0 to High(points) do
      begin
        ToTileLoc(points[j].X + corpseOffset.X, points[j].Y + corpseOffset.Y, _tx, _ty);
        if not IsOnSelf(_tx, _ty) and not IsTooFar(_tx, _ty) then
        begin
          tx := _tx;
          ty := _ty;
          Result := True;
          break;
        end;
      end;
    end;
    if Result then
      break;
  end;
end;

procedure SpellTimeout;
begin
  KeyDown(spellHotkey);
  Wait(RandomRange(30, 80));
  KeyUp(spellHotkey);
  SetTimeout(RandomAround(spellFrequency, 0.8, 1.15), 'SpellTimeout');
end;

procedure EatIfNeeded;
begin
  if (eatFrequency <> 0) and (GetSystemTime - nextScheduledEat >= 0) then
  begin
    UseItem(1, 1);
    nextScheduledEat := GetSystemTime + RandomAround(eatFrequency, 0.8, 1.15);
  end;
end;

begin
  ActivateClient;
  Wait(800);
  Load;

  if spellFrequency <> 0 then
    SetTimeout(spellFrequency, 'SpellTimeout');

  lastPlaceChange := GetSystemTime;
  currentPlace := 1;
  while True do
  begin
    if FindMonster(tx, ty) then
    begin
      // Attack.
      ClickTile(tx, ty, False);
      if smartTargeting then
      begin
        if WaitTrue(@HasTarget, ping) then
          WaitFalse(@HasTarget, attackTimeout);
      end
      else
        Wait(attackTimeout);
    end
    else if FindCorpse(tx, ty) then
    begin
      MoveTile(tx, ty, STX, STY);
      Wait(ping + gui);
      Close(lootBp);
      ClickTile(STX, STY, False);
      bp := lootBp;
      WaitTrue(@IsCurrentBpOpen, ping);
      i := foodBp + 1;
      while (i < lootBp) and FindItemAt(goldPieceColor, lootBp, 0, bp, item) do
      begin
        if FindItemAt(goldPieceColor, i, 0, bp2, item2) then
          MoveSlot(bp, item, bp2, item2)
        else
          MoveSlot(bp, item, i, 1);
        Wait(RandomRange(300, 600));
        i := i + 1;
      end;
      i := 0;
      while (i < 5) and FindItemAt(eggColor, lootBp, 0, bp, item) do
      begin
        UseItem(bp, item);
        Wait(RandomRange(100, 300));
        i := i + 1;
      end;
      Close(lootBp);
    end
    else if changePlaces and (GetSystemTime - lastPlaceChange >= placeChangeFrequency) then
    begin
      if currentPlace = 1 then
      begin
        ClickMouse(toPlace2X, toPlace2Y, True);
        currentPlace := 2;
      end
      else
      begin
        ClickMouse(toPlace1X, toPlace1Y, True);
        currentPlace := 1;
      end;
      Wait(placeChangeTime);
      lastPlaceChange := GetSystemTime;
    end;

    EatIfNeeded;
  end;
end.