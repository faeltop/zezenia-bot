program New;

var i, x, y, bp, item: Integer;
  angle: Extended;
  monsterBmp1, monsterBmp2, monsterBmp3, monsterBmp4: Integer;
  deadMonsterBmp1, deadMonsterBmp2: Integer;
  offsetX, offsetY: Integer;
  targetCircleDTM: Integer;

const
  goldPieceColor = 42748;

  width = 1920;
  height = 1080;

  screenXS = 319;
  screenYS = 35;
  screenXE = 1504;
  screenYE = 905;

  selfX = 908;
  selfY = 469;

  maxAllowedDistance = 130;

  firstItemX = 1794;
  firstBpY = 526;
  itemStep = 40;
  bpStep = 88;
  closeBtnX = 1917;
  closeBtnOffsetY = -37;

  // Time to wait for the GUI to response. Must be higher than (1000 / minimum FPS).
  gui = 500;

  // Time to wait for the server to response. The higher, the safer.
  ping = 4000;

  // How long to wait until giving up for a target.
  attackTimeout = 60000;

  // Not tested enough.
  smartTargeting = True;

  // The number of the backpack holding the food. To disable eating, set to 0.
  foodBp = 0;

  // Use the first item in the food backpack every...
  eatFrequency = 30000;

  // VK_F1, VK_F2, etc.
  spell = VK_F1;

  // Press the spell hotkey every...
  spellFrequency = 10000;

  // Imagine a new backpack now opens, what number will it be?
  lootBp = 4;

type
  Void = function: Boolean;

procedure LoadCreep;
begin
  monsterBmp1 := BitmapFromString(16, 8, 'beNo9UFlPgnAA/yRt' +
  'bPng8iTNa4oigoAHkFyKCSbggQepeZar3CydzvlQqz5t//Xg62+/' +
  'G/Z0OWokFp/u+I2uHPvG96z/O7c/R62jVd+31W2zum6Un2vCtMyN' +
  'JeZBKJh53GLJ8b9k29a+pr0z/8OsvmgSwBdKCfBtIW8xpJZN1UnU' +
  'yOMdllzUxF3POA3b+25ja1ZXqvAoMQM+17ulLY5qFQidzshonEei' +
  'XDxUiAVVEh1K7FIV5wo/lVlQtUFhFQzhk9FiLCihMZVIcfFwNuiL' +
  'u50+B4Rde4HcyGEGjek0YCaADxHwx1xOvwPCAz6AJL2uNOyhwzCX' +
  'CGtU2haYmVKayBxYBGq0Cjjw5JEIGYJzkQBIcUMXSe+VgiFg0Zte' +
  '2XX1w8DctbWNXlnfy691aVktgaXglhISQWG37xLK3vibRQK8cbLN' +
  'n9ng/M+ho+1btXdDWaniRGaVDJL+A9WNhDg=');

  monsterBmp2 := BitmapFromString(16, 12, 'beNo9kVtz0kAYhn+A3vgHO' +
  'r1WRwWaAIEcNiGn3UAg5zQQElKBQppCrFD0QtvpjIc6gzP6g/0Ex' +
  '5nnYmf2fXf3e1ZDCl0ZqSiSuVBsz7vKJuh/Hnv3afCQhR+HTul2F' +
  '6aW6gh2I5mPVdSpvXZ4JhDbww4HW7vIukv9I7vIXh/yGZaGHT4UW' +
  'Q+1c9csXDPVOw7XjCR2ooszQzkyweJY4c8l1hMYh29mhlpG7q/t9' +
  'ddldmkRo1HD9arRAGr/IfUDdJU0zgp/sN8U+5t8f7NcB5bNNjyeg' +
  'VfFCh9JnI9aLt+02LrJUORQLPz+z/fF3fLi9259GwdDmZsS+Z3b2' +
  '4aDlUMue+oESyOZ9wXGbFGkXs2d7o/VvIyDx3Kxib1UF1c2uU/8L' +
  '2+jT4kHrcImM0OGis3WMV1NSWcb+zGWr7z+zNQTDR3z36ajh+wc/' +
  'NweKhmRYF6dqihURaIrMGOPoTyhNVaEv/nUf5zHwPfZCCpwC/gE+' +
  'Rr15uXpybOnTwZtGkzGMj815MLC26D/IbKPrF0DfjBRUYja/RbNv' +
  'Xr+4vQE9P4L2/hqgJemBpMeSVTBR4zDNQLUghgses2zVEOgJR/g0' +
  'utdO0ZukYWpQxhOhheCUgAkX2AJvjL9A8oQuHo=');

  monsterBmp3 := BitmapFromString(16, 6, 'beNpLi0vydA53tIpwso50to' +
  'lwtA61twyyMfezNPUyNwIy4tzs03zcgGSIvVWAlZmPhXGGr1u8u2' +
  'OYvSWQ7WFq6GVu6G1u5G0BRMaB1uaRTjbxbg5AWV9LE6AJXmaGqd' +
  '4uQBFPM0NjNSVLbY1gB+vsYN/cUP/8iKDMIJ94D2egpQmezpmBXo' +
  'nersH2lokeTnFuDjY6mtLCwtqK8nFerj356f0l2ZMqCpqyklL9PY' +
  'NsLLKDfFoyEiriw+PcneJc7YHq7fW05MVENOVlAx2ty+IjOvIzZt' +
  'eXt+amRXs42+tpp/q5d+WktGYm5Ib4RTvbAt0DdK2FpqqhqqKJpq' +
  'q1vk5qoE9fcXZ1cqybhYmSlHiQvWVzSnR3dlIzABP9VH0=');

  deadMonsterBmp1 := BitmapFromString(8, 18, 'beNo9kFlPwlAQhdkKrSKiLF' +
  'JraymgFC4FCi1QtooItLWoLAJRCUvQxBqN0TdjjCY+6Kt/2KsmTu' +
  'bpOyczJ8dkMo6VXjWfj+2wFNEuiQ+jk+fJ4Omit9DqTSHF4BvLqE' +
  'OMhietvduOetc7nKv7bUkQdkMhfINj6CKI6pIwU2pwT2VJEdNSfD' +
  'dKEn63CwSpbqVwXq/0K3m9kK2lQYTAMTuyHfBp+Uy3nINQFfl/Tv' +
  'o9jWxSy/HNbLLOc5VEjMEDqB3B19fKgFXFdJWLpcNBCL2rLsRmdS' +
  '1hMF5LSOXYCOX3QieEZrPZZrWgCAKTyFycjzBhIuD78dtMv6Pm+H' +
  'ZBGMjFYa0EVSeK/vGDDAd7uO/rb9Nhuyhs+TyYw26zWuM0KaeA0d' +
  'U+jdlNR9OlLMwAD7qdyyBEL46Vr0fj43r6MhmMaqUdcpML0RJgu3' +
  'vly44215uwt3omQfq944bckwvlJIgz2yxNRikCvnBi6Ot0aHSUIm' +
  'DXXCuYw2GxWP7yvF+NX+ZniyOlJQlskILSD/0Gq+dQGg==');

  deadMonsterBmp2 := BitmapFromString(13, 10, 'beNolUOtPgnAU/dTzQ+tDm' +
  'XPZtNSyl/MxsJVpKWCAhCIihfQTEdLC0Bpu+YhaZaXrb+5XbXd3O' +
  '7tn555zkHA0sJ7YC+KxEHuEFJMH5ZNDJXt6x1GPEvdcE0cN8HWrw' +
  'KHiUZVMPwiMDQSTowFx8g9flF/OxNS+Ow04V0SqwzMDILxrsnVR0' +
  'BlcozO3bPa+xDwpF+OWNjH1saHe84xdLY+uwdio96vlVpHWc3iNT' +
  'KtUxrrkPw110qrD6xAIo2v580b5MtQeEIwCBfWhzzMkojLEsCa96' +
  'rKtiHBDzkcDvGkVS8xrNAY5yJZv0+0iD2ItPteVOEtkP25qUOddr' +
  '9igZHIUjJCO7HucjvnZmWhgQ8ocN86JJnvWB+VBVexV+K6Yb7JZG' +
  'U+RaCTiX/c6Hbvetfh2AEIZT7ZLuXaJMXkadgU/yliykECxaAgN+' +
  'gOrruXFhW2Pmz1Clb9QdRrTcxg0D+vNHyIkGk6Gdnwu59z01NrKU' +
  'vYH1ot97w==');
end;

procedure LoadSwarm;
begin
  offsetX := 20;
  offsetY := 20;

  monsterBmp1 := BitmapFromString(9, 9, 'beNodj8sORjAUhB/H2kIaqiS' +
  'EulXc4lILC0QEC0HE2/+Tv6vOnK9zpkK4rhvHcVEUnuepqqooimm' +
  'aWZYlSUIplVK+77uuKxjGWN/33/dd14VRXdfneU7TFIYhRm3bwt/' +
  '33TAMpG3bNgwD5xxpVVXBn+dZ13XACCnL0nEckFEUQXZdRwixLAs' +
  'd0AfhkLZt+74fBIGmaZB4C57+Dy6Q4OGDT9MUK5qmQYc8z7ECOQD' +
  'gj+N4HMd938/zLMuC74gfWKtJ2w==');

  monsterBmp2 := BitmapFromString(9, 9, 'beNo9jrsORUAURf9Fr2EuBvE' +
  '2COJVDCOCRKhoxP/fHYVTzZy1H2cYFEVRVZVS6jgOY6yu677vp2l' +
  'a19W2bUKIZVlBEJRlKYTY9/08z/u+wzCES9d1aHzfz7Ksqqqu6zj' +
  'neZ4Dwfh7Bxr6jmmaSZIAaZpmGAZiPc9DThzH2OMNC2Su6+LbNA3' +
  'q5nnetg0JQCiKoggt4zgex3Fd1/M8six/qCiKtm3hWpYFAkmSPpS' +
  'mKS7EYRAMf9c/Q3U=');

  monsterBmp3 := BitmapFromString(9, 9, 'beNpNjrmqhFAQRBM/wFQzEQw' +
  'EUd647wuKIOKSiCiCiQaC/x/O4UXTwaVv1+nqel9N03RddxynLMt' +
  'pms7zXNe167owDEVRlCQJ1ff9LMuapqmqKo5j13UFQUBVVfXvpz7' +
  '/JcuyoiimaeLgeR4TzIMgiKLIsiwwGm7x2rYNkKYptsxhONH3fVE' +
  'UrADwHYbBMIwkScZx3LatbVtWCEPUfd/Jluf5sizXdUGSE2fy3/e' +
  'NRA/zPM88z5jXdX0cx/sFo5c6hA==');

  monsterBmp4 := BitmapFromString(8, 7, 'beNodjs0KhSAUhF8q/EkhsDI' +
  'QNMXMhYuQoISI+/67OzSrOcPHzDEmhPA8z3EcWuu+77dte9/3vm/' +
  'n3HVdpZRpmjjn3nuEtVZg+76v6zoMA6V0WZacc0pJCKGUQsgY67p' +
  'OSjmO4zzP8IQQkOwTDE7AII0xqI0xYtRai2Y0IMQzrbXfp/M8MWf' +
  '+pqkx9g==');

  deadMonsterBmp1 := BitmapFromString(12, 8, 'beNo1kN1rRmAYxnltQ5j5aG' +
  'Fs3hKF2miiRBiFcuSjHEiNAyf+/9Pdqf0On/u67uu6n23ruq4oCs' +
  'dxeJ4nSdI0zbIsPc8TBIF4enyX+G/7I03TKIpgxLIsRVEwnaYpSR' +
  'JJkh4wjGXIt9eXrwtd158v4jg+jqNtW03TEARBUfR2Q23bBoEoih' +
  'DEMAzs3Pe9rmtVVTEMAxcsNAwDUnAchxeapoMgWNcVKimKQhAEKC' +
  'HddV1ZljmOAwHU9n2/7/s8z8ELMqhRVdXPRRiGlmXd73dw5RdQG8' +
  '5pmmYYhnmez/NclgV+4POfLMvGcfy92P4Az/0ySg==');
end;

procedure LoadBandit;
begin
  offsetX := 20;
  offsetY := 20;

  monsterBmp1 := BitmapFromString(9, 9, 'beNpLD942p27TzJr106qWTyh' +
  'd2F0wty13ZkvW1MaMCTWpKyeVrZhYury/BCg+uzV7RnPm9ObMaU2' +
  'ZQNmlfcVLegqB4vM78+e2585py5ndmjMLqKYle1l/yYLO/NltOQu' +
  '6CpYAlfUVLwKq7Mqf054ztz1vZgvQnCyg1MqJpUCV8zvygdzpzVm' +
  'Z0Z5txbHzOvLmd+Uv7C7srUzKi/ON9rMvTQ0011MrTPJf3FM4rzM' +
  'faEVJSoCdqbaspGiwu5WrtUFlRujS3qJ5nXlAcyozQvxczE30VGI' +
  'DHHNivbvKE+FSXeUJFRkhQMEKAIsMcvI=');

  monsterBmp2 := BitmapFromString(10, 10, 'beNpdkM1uglAQhR+pD+DCT' +
  'fe4rKmaFAragAIX0GiLmioqIHh7Lam1VqH4U2LiM/bEtEljMpnNd' +
  '+bMmWHNjFmJpy0ded6V6JM4exSDjuAY5a5yg74LjfWkARr1q8yW6' +
  'B/tKUWHlBNf37jqalL/cJS35wdmV8OO4LfuxmZlZFSAfstTVyMl6' +
  'tdebPG84h6C/3TjNj7H9eUQW2oQXNDE19KAbAMCATKABm3+tSchV' +
  'eyp6ZTsQ3NPzdhVFwMZ5oZQGOolZouxpwEdZuaBWruQfPna+0C+5' +
  'fKEL8AEkbbn2W9q4QkZa6ZT/Tp3VeLyOs9BgJPhmVHrOG+donb2A' +
  '86YlXQ=');

  monsterBmp3 := BitmapFromString(14, 13, 'beNqzNTqxpvvYqq6d8xvXT' +
  'q1YOals9ZSKhV2FyaGuqgpSeuoKgW6W8UFOpnqqXJzsR1Z0Hlres' +
  'W1OPVDZsv6S5RNK5rXnZUZ7meurudoY5sT61GZHBLtbaSjL7Fvcs' +
  'mdR8+ZZtSsnli7pLVrQVTCrJbutJLYoyb8yM7S7InFiTWppamCkr' +
  '932uQ3b59avn1a1YkLpwu6COW05M1uy5nfkAXUt7Ste1le8qKtgc' +
  'l1aS2HMhunVIGUTy4DKFnTmL+wqAKIFXfnzO/Pnd+UB0dz23KkN6' +
  'd2ViUBLIabNbsue154LNAfo4EXdhbNAhmeDUHPWtMbMKfXpQHMWd' +
  'RfMbcud0Zw1pz0HqHJ5f0lvVVJJSmBVZgjQndMaMybXp0+sTQWqn' +
  'w3WPr05a3Zb7uKeQqC9+fG+dqba/i7mlRkhUxsz+quTO0rjeyoTp' +
  'zZkADVOb8qc1ZqzsDt/ZnN2tJ+9rKQoMBhz47wn1aW2l8TVZIc15' +
  'UcDXTuhJhWoF2gy0P1AZ5SmBoW4W8UGOlakh7SVxBWnBCaGuJSnB' +
  'TcXxvRUJALdDDQWqAxITqhJ6SyLby2ObSmKqc4KAypzszFsLogGu' +
  'nZ6YybItKYsoJNaS2Kb8qNqs8PL04MLEvzSwz1CPaycLfWAalZOA' +
  'AXUiomlQAOBGvPifIDxHuFjG+xhGeBq4ets5uVg4gEA2dT5nQ==');

  deadMonsterBmp1 := BitmapFromString(14, 13, 'beNrL8+FkZ4Ugbg5WXi42I' +
  'T5OKVE+ZWkhdXlRbUVxVVlhMUEeTnYWoBRcJQ8XGz8Ph4Qwr4a8q' +
  'JmWrK2BgoupiqWOnLyEAFAlFxCBjeLn5ZAQ4lWQENBVlnAwVgp21' +
  'Al31Y/1MAp10nU2UTHSkNZXleThZBPk45QQ4gFaZKwu5WqqEu1uW' +
  'BhhWxxlVxJtXxhpmxVileJnFuNhKMDLISnCpyQlZKop426uBlRWE' +
  'mXXlePdke3VlunZmuEBRM1p7hVxjlIifOpyoiYa0h6W6nGexkCjO' +
  'rI951SFTC8NnFjo15vnA9KV5VmX5KwsI2yiKQN0fIyHUVmMPVB8b' +
  'nXIuvbYpQ3hcyqDpxb7Tyzw7cn1bk51A1rqaakOVFYQYduc7t6V4' +
  '9We4daU4tSc4gxE7emu/TleU/N9elLd3MxUYz2NS2PsgY4BWteR5' +
  'ZETZBpkoxrjqp3ua1gRadWb5rqgyG9qqitQZZKPaV2yS3eO17TSg' +
  'I4s9yQvfTsdCT8rpXg3ndIwiwnpbsvKAmdneAADKtBepyjKrinNb' +
  'XKRf3e2R3agCVBZnLtuboh5Y5LTtAKfFdWh8/J9gEHkYKSUFmhen' +
  'eDUn+/Tm+NZGmEV76adF2Jek+jUk+szpyJ4dWPkwrIgYETrKEm4m' +
  'qpmBVtOKPCdWRbQluFWFmVdn+jUnunRX+AztThgVnnQZABDq5f1');
end;

procedure LoadStatics;
begin
  targetCircleDTM := DTMFromString('78DA630C666660D06362800146205E2B21086' +
  '7FF07024675A01A1B841A10982721005703A6A5816AF851D5AC92' +
  '164651030002E90795');
end;

procedure SafeMove(x, y: Integer);
begin
  MoveWindMouseEx(x, y, 20, 20, 40);
end;

procedure SafeClick(x, y: Integer; left: Boolean);
begin
  SafeMove(x, y);
  ClickMouse(x, y, left);
end;

procedure Drag(Fx, Fy, Tx, Ty: Integer);
begin
  SafeMove(Fx, Fy);
  Wait(gui);
  HoldMouse(Fx, Fy, True);
  SafeMove(Tx, Ty);
  ReleaseMouse(Tx, Ty, True);
end;

function BpY(bp: Integer): Integer;
begin
  Result := firstBpY + bpStep * (bp - 1);
end;

function ItemX(bp: Integer): Integer;
begin
  Result := firstItemX + itemStep * (bp - 1);
end;

function CloseBtnY(bp: Integer): Integer;
begin
  Result := BpY(bp) + closeBtnOffsetY;
end;

function IsOpen(bp: Integer): Boolean;
var x, y: Integer;
begin
  Result := FindColorCircleTolerance(x, y, 12632256, closeBtnX, CloseBtnY(bp), 10, 90);
end;

function FindItemAt(color, bp, item: Integer; out resultBp, resultItem: Integer): Boolean;
var bpUnspecified, itemUnspecified, found: Boolean;
var x, y: Integer;
begin
  if bp = 0 then
  begin
    bpUnspecified := True;
    bp := 1;
  end;
  if item = 0 then
  begin
    itemUnspecified := True;
    item := 1;
  end;
  while IsOpen(bp) do
  begin
    while item <= 3 do
    begin
      found := FindColorCircleTolerance(x, y, color, ItemX(item), BpY(bp), 20, 10);
      if found then
      begin
        resultBp := bp;
        resultItem := item;
        break;
      end;
      if itemUnspecified then
        item := item + 1
      else
        break
    end;
    if bpUnspecified then
      bp := bp + 1
    else
      break
  end;

  Result := found;
end;

function FindItem(color: Integer; out resultBp, resultItem: Integer): Boolean;
begin
  Result := FindItemAt(color, 0, 0, resultBp, resultItem);
end;

procedure MoveItem(bp, item, x, y: Integer);
begin
  Drag(ItemX(item), BpY(bp), x, y);
  Wait(gui);
  KeyDown(VK_RETURN);
  KeyUp(VK_RETURN);
end;

procedure MoveItemToSlot(fromBp, fromItem, toBp, toItem: Integer);
begin
  MoveItem(fromBp, fromItem, ItemX(toItem), BpY(toBp));
end;

function IsCurrentBpOpen: Boolean;
begin
  Result := IsOpen(bp);
end;

procedure Close(bp: Integer);
var x, y: Integer;
begin
  x := closeBtnX;
  y := CloseBtnY(bp);
  while IsOpen(bp) do
  begin
    MoveMouseSmooth(x, y);
    ClickMouse(x, y, True);
    Wait(500);
  end;
end;

function LocateTarget(out x, y: Integer): Boolean;
begin
  Result := False;
  for i := 1 to 10 do
  begin
    if FindDTM(targetCircleDTM, x, y, screenXS, screenYS, screenXE, screenYE) then
    begin
      Result := True;
      break;
    end;
    Wait(10);
  end;
end;

function HasTarget: Boolean;
var x, y: Integer;
begin
  Result := LocateTarget(x, y);
end;

function WaitFunc(func: Void; positive: Boolean; timeout: Integer): Boolean;
var start: Integer;
begin
  start := GetSystemTime;
  Result := True;
  while func() <> positive do
  begin
    if GetSystemTime - start >= timeout then
    begin
      Result := False;
      break;
    end;
  end;
end;

function WaitTrue(func: Void; timeout: Integer): Boolean;
begin
  Result := WaitFunc(func, True, timeout);
end;

function WaitFalse(func: Void; timeout: Integer): Boolean;
begin
  Result := WaitFunc(func, False, timeout);
end;

begin
  LoadStatics;
  LoadSwarm;
  ActivateClient;

  while True do
  begin
    if ((monsterBmp1 <> 0) and FindBitmapTolerance(monsterBmp1, x, y, 40)) or
      ((monsterBmp2 <> 0) and FindBitmapTolerance(monsterBmp2, x, y, 40)) or
      ((monsterBmp3 <> 0) and FindBitmapTolerance(monsterBmp3, x, y, 40)) or
      ((monsterBmp4 <> 0) and FindBitmapTolerance(monsterBmp4, x, y, 40)) then
    begin
      if (Abs(Extended(selfX - x)) <= maxAllowedDistance) and (Abs(Extended(selfY - y)) <= maxAllowedDistance) then
      begin
        // Attack.
        SafeClick(x + offsetX, y + offsetY, False);
        if smartTargeting then
        begin
          if WaitTrue(@HasTarget, ping) then
          begin
            WaitFalse(@HasTarget, attackTimeout);
          end;
        end
        else
        begin
          Wait(attackTimeout);
        end;
      end;
    end
    else if ((deadMonsterBmp1 <> 0) and FindBitmapTolerance(deadMonsterBmp1, x, y, 40)) or
      ((deadMonsterBmp2 <> 0) and FindBitmapTolerance(deadMonsterBmp2, x, y, 40)) then
    begin
      if (Abs(Extended(selfX - x)) <= maxAllowedDistance) and (Abs(Extended(selfY - y)) <= maxAllowedDistance) then
      begin
        Drag(x, y, selfX, selfY);
        Wait(ping + gui);
        Close(lootBp);
        SafeClick(selfX, selfY, False);
        bp := lootBp;
        WaitTrue(@IsCurrentBpOpen, ping);
        i := foodBp + 1;
        while (i < lootBp) and FindItemAt(goldPieceColor, lootBp, 0, bp, item) do
        begin
          MoveItemToSlot(bp, item, i, 1);
          Wait(500);
          i := i + 1;
        end;
        Close(lootBp);
      end;
    end;
  end;
end.